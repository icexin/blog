<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on icexin的站点</title><link>https://icexin.com/post/</link><description>Recent content in Posts on icexin的站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 09 Aug 2021 22:17:27 +0800</lastBuildDate><atom:link href="https://icexin.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Go Application on Bare Metal</title><link>https://icexin.com/post/running-go-application-on-bare-metal/</link><pubDate>Mon, 09 Aug 2021 22:17:27 +0800</pubDate><guid>https://icexin.com/post/running-go-application-on-bare-metal/</guid><description>In the process of writing eggos, I found that removing the hardware initialization code, the main program is actually an ordinary Go program. Like other Go programs, the main function is used as the entry point, but it never returns.
Can other ordinary programs also run on bare metal? The answer is yes. I extracted the kernel code of eggos as a separate Go library. Other applications can run on bare metal like eggos by writing import _ &amp;quot;github.</description></item><item><title>将Go程序跑在裸机上之LibOS</title><link>https://icexin.com/post/write-your-own-unikernel/</link><pubDate>Sun, 08 Aug 2021 01:05:45 +0800</pubDate><guid>https://icexin.com/post/write-your-own-unikernel/</guid><description>前言 之前我写过一篇探索在裸机上运行 Go 程序的文章，里面介绍了在裸机上运行 Go 代码需要的技术，顺便介绍了 eggos，一个运行于裸机的 unikern</description></item><item><title>Dlv支持GDB Stub</title><link>https://icexin.com/post/dlv-gdb-stub/</link><pubDate>Tue, 06 Jul 2021 02:08:29 +0800</pubDate><guid>https://icexin.com/post/dlv-gdb-stub/</guid><description>前言 开发 eggos 的过程中一直使用 GDB 做调试，诸多功能都非常不方便，比如对 goroutine 的打印，变量的展开等等。dlv 是 go 专属的调试器，也是 go 官方推荐的： Note that Delve is</description></item><item><title>Golang IO的妙用</title><link>https://icexin.com/post/golang-io/</link><pubDate>Thu, 12 May 2016 21:46:17 +0800</pubDate><guid>https://icexin.com/post/golang-io/</guid><description>golang标准库对io的抽象非常精巧，各个组件可以随意组合，可以作为接口设计的典范。这篇文章结合一个实际的例子来和大家分享一下。 背景 以一个</description></item></channel></rss>